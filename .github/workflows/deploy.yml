
on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: dotnet-app
  ECS_CLUSTER: dotnet-ecs-cluster
  ECS_SERVICE: dotnet-service
  ECS_TASK_DEF: .github/ecs-task-definition.json
  CONTAINER_NAME: dotnet-app

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Fill in the new image ID in the ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEF }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

    - name: Deploy ECS service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        task-definition: ${{ steps.task-def.outputs.task-definition }}


    - name: Teams Notification
      uses: jdcargile/ms-teams-notification@v1.3
      with:
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        github-token: ${{ github.token }}
        ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI_DEV }}
        notification-summary: App  Deployment is ${{ job.status }}
      if: always()
