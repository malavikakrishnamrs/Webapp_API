on:
  push:
    branches:
      - main
    paths:
      - 'MyApp/**'
     
name: Deploy to Amazon ECS Cluster 
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAG}}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAG }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image into Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ secrets.REGISTRY_NAME}}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME}}
          IMAGE_TAG: ${{ github.sha }}
          REGION: ap-south-1
          ECS_CLUSTER: app-ecs
          SERVICE_NAME: app
          

        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd ./MyApp/
          docker build -f Dockerfile  -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ../.
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition for app container
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: MyApp/task-definitions/staging.json
          container-name: app
          image: ${{ steps.build-image.outputs.image }}
          # image: 137618288381.dkr.ecr.ap-south-1.amazonaws.com/ccd-dev:v1

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: app
          cluster: app-stag
          wait-for-service-stability: true
          wait-for-minutes: 10 minutes

      - name: Teams Notification
        uses: jdcargile/ms-teams-notification@v1.3
        with:
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI_DEV }}
          notification-summary: App Staging Deployment is ${{ job.status }}
        if: always()
